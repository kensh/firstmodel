load ./compile.maude


mod VIRTUAL is
 pr CONNECTIONS .
 pr MACHINES .
 sort Virtual .

 op virt : Bag{Machine} Bag{Connection} -> Virtual [ctor] .
 
endm


mod REAL is
 pr CONNECTIONS .
 pr MACHINES .
 sort Real . 
 
 op real : Bag{Machine} Bag{Connection} -> Real [ctor] .

endm

mod CHEF is
 pr VIRTUAL .
 pr REAL .
 sort Chef .
 sort Env .
 sorts Var Sys .
 subsort Var < Sys .
 subsorts Virtual Real < Env .

 op  _ _ : Sys Sys -> Sys [assoc comm] .
 op  env : Env -> Var .
 ops msv msr : Bag{Machine} -> Var .
 op  cs : Bag{Connection} -> Var .

 vars CSV CSR RECIPE : Bag{Connection} . *** CSVP is receipe
 vars MSV MSR MS : Bag{Machine} .
 vars M X Y : Machine .
 var  C : Pair{Machine, Machine} .

 rl  [mac_real] : env(real(MSR, CSR)) msr(M MS) => env(real(M MSR, CSR)) msr(MS) .
 rl  [mac_virt] : env(virt(MSV, CSV)) msv(M MS) => env(virt(M MSV, CSV)) msv(MS) .
 rl  [con_virt] : env(virt(MSV, CSV)) cs(C RECIPE) => env(virt(MSV, C CSV)) cs(RECIPE) .
 crl [con_real] : env(virt(MSV, [X, Y] CSV)) env(real(X Y MSR, CSR))
               => env(virt(MSV, [X, Y] CSV)) env(real(X Y MSR, [X, Y] CSR))
                  if occurrences([X, Y], CSR) == 0 .

endm

select CHEF .

search [1] in CHEF : 
 env(virt(ap(1) ap(3) db(1), [ap(1), db(1)] [ap(3), db(1)]))
 env(real(ap(1) db(1), [ap(1), db(1)])) 
 msv(ap(2) ap(4) ap(5) ap(6) ap(7)) 
 msr(ap(2) ap(3) ap(4) ap(5)) 
 cs([ap(2), db(1)] [ap(5), db(1)] [ap(6), db(1)]) 
=>* 
 env(virt(ap(1) ap(2) ap(3) ap(5) ap(6) db(1), [ap(1), db(1)] [ap(2), db(1)] [ap(3), db(1)] [ap(5), db(1)] [ap(6), db(1)]))
 env(real(ap(1) ap(2) ap(3) ap(5) db(1), [ap(1), db(1)] [ap(2), db(1)] [ap(3), db(1)] [ap(5), db(1)]))
 msv(ap(4) ap(7)) 
 msr(ap(4))
 cs(mt) .





***(
search [1] in CHEF : 
 env(virt(ap(1) db(1), [ap(1), db(1)]))
 env(real(ap(1) db(1), [ap(1), db(1)])) 
 ms(ap(2)) 
 ms(ap(2)) 
 cs([ap(2), db(1)]) 
=>* 
 env(virt(ap(1) ap(2) db(1), [ap(1), db(1)] [ap(2), db(1)]))
 env(real(ap(1) ap(2) db(1), [ap(1), db(1)] [ap(2), db(1)]))
 ms(mt) 
 ms(mt)
 cs(mt) .
 

show path 14 .
)***

quit
